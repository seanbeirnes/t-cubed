// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: game.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createGame = `-- name: CreateGame :one
INSERT INTO game (uuid, name, game_type_id, next_player_id, ai_player_id, player_1_piece, player_2_piece)
VALUES (uuid_generate_v4(), $1, $2, $3, $4, $5, $6)
RETURNING uuid, created_at, updated_at, name, game_type_id, board_state, next_player_id, player_1_piece, player_2_piece, ai_player_id, terminal_state
`

type CreateGameParams struct {
	Name         string
	GameTypeID   int32
	NextPlayerID int16
	AiPlayerID   int16
	Player1Piece string
	Player2Piece string
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (Game, error) {
	row := q.db.QueryRow(ctx, createGame,
		arg.Name,
		arg.GameTypeID,
		arg.NextPlayerID,
		arg.AiPlayerID,
		arg.Player1Piece,
		arg.Player2Piece,
	)
	var i Game
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.GameTypeID,
		&i.BoardState,
		&i.NextPlayerID,
		&i.Player1Piece,
		&i.Player2Piece,
		&i.AiPlayerID,
		&i.TerminalState,
	)
	return i, err
}

const deleteGame = `-- name: DeleteGame :exec
DELETE FROM game
WHERE uuid = $1
`

func (q *Queries) DeleteGame(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteGame, argUuid)
	return err
}

const getGameByUUID = `-- name: GetGameByUUID :one
SELECT uuid, created_at, updated_at, name, game_type_id, board_state, next_player_id, player_1_piece, player_2_piece, ai_player_id, terminal_state FROM game 
WHERE uuid = $1
`

func (q *Queries) GetGameByUUID(ctx context.Context, argUuid uuid.UUID) (Game, error) {
	row := q.db.QueryRow(ctx, getGameByUUID, argUuid)
	var i Game
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.GameTypeID,
		&i.BoardState,
		&i.NextPlayerID,
		&i.Player1Piece,
		&i.Player2Piece,
		&i.AiPlayerID,
		&i.TerminalState,
	)
	return i, err
}

const updateGame = `-- name: UpdateGame :one
UPDATE game
SET name = $1, next_player_id = $2, board_state = $3, terminal_state = $4
WHERE uuid = $5
RETURNING uuid, created_at, updated_at, name, game_type_id, board_state, next_player_id, player_1_piece, player_2_piece, ai_player_id, terminal_state
`

type UpdateGameParams struct {
	Name          string
	NextPlayerID  int16
	BoardState    []byte
	TerminalState int16
	Uuid          uuid.UUID
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) (Game, error) {
	row := q.db.QueryRow(ctx, updateGame,
		arg.Name,
		arg.NextPlayerID,
		arg.BoardState,
		arg.TerminalState,
		arg.Uuid,
	)
	var i Game
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.GameTypeID,
		&i.BoardState,
		&i.NextPlayerID,
		&i.Player1Piece,
		&i.Player2Piece,
		&i.AiPlayerID,
		&i.TerminalState,
	)
	return i, err
}
