// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: trace_cache.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createTraceCache = `-- name: CreateTraceCache :one
INSERT INTO trace_cache (uuid, pre_post_move_state_hash, trace)
VALUES (uuid_generate_v4(), $1, $2)
RETURNING uuid, pre_post_move_state_hash, trace, created_at, updated_at
`

type CreateTraceCacheParams struct {
	PrePostMoveStateHash []byte
	Trace                []byte
}

func (q *Queries) CreateTraceCache(ctx context.Context, arg CreateTraceCacheParams) (TraceCache, error) {
	row := q.db.QueryRow(ctx, createTraceCache, arg.PrePostMoveStateHash, arg.Trace)
	var i TraceCache
	err := row.Scan(
		&i.Uuid,
		&i.PrePostMoveStateHash,
		&i.Trace,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTraceCache = `-- name: GetTraceCache :one
SELECT uuid, pre_post_move_state_hash, trace, created_at, updated_at FROM trace_cache
WHERE uuid = $1
`

func (q *Queries) GetTraceCache(ctx context.Context, argUuid uuid.UUID) (TraceCache, error) {
	row := q.db.QueryRow(ctx, getTraceCache, argUuid)
	var i TraceCache
	err := row.Scan(
		&i.Uuid,
		&i.PrePostMoveStateHash,
		&i.Trace,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTraceCacheByHash = `-- name: GetTraceCacheByHash :one
SELECT uuid, pre_post_move_state_hash, trace, created_at, updated_at FROM trace_cache
WHERE pre_post_move_state_hash = $1
`

func (q *Queries) GetTraceCacheByHash(ctx context.Context, prePostMoveStateHash []byte) (TraceCache, error) {
	row := q.db.QueryRow(ctx, getTraceCacheByHash, prePostMoveStateHash)
	var i TraceCache
	err := row.Scan(
		&i.Uuid,
		&i.PrePostMoveStateHash,
		&i.Trace,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
